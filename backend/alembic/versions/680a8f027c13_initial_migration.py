"""Initial migration

Revision ID: 680a8f027c13
Revises: 
Create Date: 2025-05-18 20:04:16.204356

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '680a8f027c13'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('form_submissions',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('form_type', sa.String(), nullable=False),
    sa.Column('payload', sa.JSON(), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('leagues',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('status', sa.String(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('notifications',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('title', sa.String(), nullable=False),
    sa.Column('message', sa.Text(), nullable=False),
    sa.Column('type', sa.String(), nullable=False),
    sa.Column('read', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('profiles',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('username', sa.String(), nullable=True),
    sa.Column('display_name', sa.String(), nullable=True),
    sa.Column('platform', sa.String(), nullable=True),
    sa.Column('gamer_tag', sa.String(), nullable=True),
    sa.Column('avatar_url', sa.String(), nullable=True),
    sa.Column('is_admin', sa.Boolean(), nullable=False),
    sa.Column('status', sa.String(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('email', sa.String(), nullable=True),
    sa.Column('discord_id', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email')
    )
    op.create_table('conferences',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('league_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['league_id'], ['leagues.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('league_settings',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('league_id', sa.Integer(), nullable=False),
    sa.Column('settings_json', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['league_id'], ['leagues.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('divisions',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('season_id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['season_id'], ['seasons.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('matches',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('team1_id', sa.UUID(), nullable=False),
    sa.Column('team2_id', sa.UUID(), nullable=False),
    sa.Column('season_id', sa.UUID(), nullable=False),
    sa.Column('scheduled_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('started_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('ended_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('status', sa.String(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['season_id'], ['seasons.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['team1_id'], ['teams.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['team2_id'], ['teams.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('team_invitations',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('team_id', sa.UUID(), nullable=False),
    sa.Column('email', sa.String(), nullable=False),
    sa.Column('role', sa.String(), nullable=False),
    sa.Column('token', sa.String(), nullable=False),
    sa.Column('status', sa.String(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('accepted_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('user_id', sa.UUID(), nullable=True),
    sa.ForeignKeyConstraint(['team_id'], ['teams.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['profiles.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('token')
    )
    op.create_table('team_members',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('profile_id', sa.UUID(), nullable=False),
    sa.Column('team_id', sa.UUID(), nullable=False),
    sa.Column('season_id', sa.UUID(), nullable=False),
    sa.Column('is_captain', sa.Boolean(), nullable=False),
    sa.Column('joined_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('status', sa.String(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['profile_id'], ['profiles.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['season_id'], ['seasons.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['team_id'], ['teams.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('match_submissions',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('match_id', sa.UUID(), nullable=False),
    sa.Column('team_id', sa.UUID(), nullable=False),
    sa.Column('score', sa.Integer(), nullable=True),
    sa.Column('status', sa.String(), nullable=False),
    sa.Column('submitted_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('reviewed_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('reviewed_by', sa.UUID(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['match_id'], ['matches.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['reviewed_by'], ['profiles.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['team_id'], ['teams.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('player_stats',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('profile_id', sa.UUID(), nullable=False),
    sa.Column('match_id', sa.UUID(), nullable=False),
    sa.Column('stat_type', sa.String(), nullable=False),
    sa.Column('value', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['match_id'], ['matches.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['profile_id'], ['profiles.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('webhook_events',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('webhook_id', sa.UUID(), nullable=False),
    sa.Column('event_type', sa.String(), nullable=False),
    sa.Column('payload', postgresql.JSON(astext_type=sa.Text()), nullable=False),
    sa.Column('attempt', sa.Integer(), nullable=True),
    sa.Column('max_attempts', sa.Integer(), nullable=True),
    sa.Column('status', sa.String(), nullable=True),
    sa.Column('error', sa.String(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('last_attempt', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['webhook_id'], ['webhooks.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.drop_index('ix_analytics_logs_id', table_name='analytics_logs')
    op.drop_table('analytics_logs')
    op.drop_table('wp_posts')
    op.drop_index('users_discord_id_key', table_name='users')
    op.drop_table('users')
    op.add_column('players', sa.Column('position', sa.String(), nullable=True))
    op.add_column('players', sa.Column('jersey_number', sa.Integer(), nullable=True))
    op.add_column('players', sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True))
    op.alter_column('players', 'id',
               existing_type=sa.UUID(),
               type_=sa.Integer(),
               existing_nullable=False,
               autoincrement=True,
               existing_server_default=sa.text('gen_random_uuid()'))
    op.alter_column('players', 'name',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               nullable=True)
    op.drop_index('idx_players_wp_id', table_name='players')
    op.drop_index('players_wp_id_key', table_name='players')
    op.drop_constraint('players_season_id_fkey', 'players', type_='foreignkey')
    op.drop_constraint('players_team_id_fkey', 'players', type_='foreignkey')
    op.drop_column('players', 'season_id')
    op.drop_column('players', 'team_id')
    op.drop_column('players', 'team_wp_id')
    op.drop_column('players', 'wp_id')
    op.drop_column('players', 'stats')
    op.add_column('roles', sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True))
    op.add_column('roles', sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True))
    op.alter_column('roles', 'name',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.add_column('rosters', sa.Column('profile_id', sa.UUID(), nullable=False))
    op.add_column('rosters', sa.Column('status', sa.String(), nullable=False))
    op.add_column('rosters', sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True))
    op.add_column('rosters', sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True))
    op.alter_column('rosters', 'joined_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.drop_index('rosters_user_id_team_id_season_id_key', table_name='rosters')
    op.drop_constraint('rosters_season_id_fkey', 'rosters', type_='foreignkey')
    op.drop_constraint('rosters_user_id_fkey', 'rosters', type_='foreignkey')
    op.create_foreign_key(None, 'rosters', 'seasons', ['season_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key(None, 'rosters', 'profiles', ['profile_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key(None, 'rosters', 'teams', ['team_id'], ['id'], ondelete='CASCADE')
    op.drop_column('rosters', 'user_id')
    op.add_column('seasons', sa.Column('description', sa.Text(), nullable=True))
    op.add_column('seasons', sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True))
    op.add_column('seasons', sa.Column('status', sa.String(), nullable=False))
    op.add_column('seasons', sa.Column('league_id', sa.Integer(), nullable=True))
    op.alter_column('seasons', 'name',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('seasons', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.create_foreign_key(None, 'seasons', 'leagues', ['league_id'], ['id'])
    op.add_column('teams', sa.Column('description', sa.Text(), nullable=True))
    op.add_column('teams', sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True))
    op.add_column('teams', sa.Column('status', sa.String(), nullable=False))
    op.alter_column('teams', 'name',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('teams', 'season_id',
               existing_type=sa.UUID(),
               nullable=False)
    op.alter_column('teams', 'logo_url',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.drop_index('idx_teams_wp_id', table_name='teams')
    op.drop_index('teams_wp_id_key', table_name='teams')
    op.drop_constraint('teams_season_id_fkey', 'teams', type_='foreignkey')
    op.drop_constraint('teams_created_by_fkey', 'teams', type_='foreignkey')
    op.create_foreign_key(None, 'teams', 'profiles', ['created_by'], ['id'], ondelete='SET NULL')
    op.create_foreign_key(None, 'teams', 'seasons', ['season_id'], ['id'], ondelete='CASCADE')
    op.drop_column('teams', 'wp_id')
    op.add_column('user_roles', sa.Column('profile_id', sa.UUID(), nullable=False))
    op.add_column('user_roles', sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True))
    op.add_column('user_roles', sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True))
    op.alter_column('user_roles', 'context',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.drop_index('user_roles_user_id_role_id_key', table_name='user_roles')
    op.drop_constraint('user_roles_role_id_fkey', 'user_roles', type_='foreignkey')
    op.drop_constraint('user_roles_user_id_fkey', 'user_roles', type_='foreignkey')
    op.create_foreign_key(None, 'user_roles', 'profiles', ['profile_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key(None, 'user_roles', 'roles', ['role_id'], ['id'], ondelete='CASCADE')
    op.drop_column('user_roles', 'user_id')
    op.alter_column('webhook_analytics', 'event_distribution',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=postgresql.JSON(astext_type=sa.Text()),
               existing_nullable=True)
    op.alter_column('webhook_analytics', 'retry_distribution',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=postgresql.JSON(astext_type=sa.Text()),
               existing_nullable=True)
    op.alter_column('webhook_analytics', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('webhook_analytics', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.drop_index('idx_webhook_analytics_event_distribution', table_name='webhook_analytics', postgresql_using='gin')
    op.drop_constraint('webhook_analytics_webhook_id_fkey', 'webhook_analytics', type_='foreignkey')
    op.create_foreign_key(None, 'webhook_analytics', 'webhooks', ['webhook_id'], ['id'])
    op.alter_column('webhook_health', 'last_check',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True)
    op.alter_column('webhook_health', 'status',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('webhook_health', 'last_error',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('webhook_health', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.drop_index('idx_webhook_health_status', table_name='webhook_health')
    op.drop_constraint('webhook_health_webhook_id_fkey', 'webhook_health', type_='foreignkey')
    op.create_foreign_key(None, 'webhook_health', 'webhooks', ['webhook_id'], ['id'])
    op.alter_column('webhook_retries', 'webhook_id',
               existing_type=sa.UUID(),
               nullable=False)
    op.alter_column('webhook_retries', 'event',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=postgresql.JSON(astext_type=sa.Text()),
               existing_nullable=False)
    op.alter_column('webhook_retries', 'last_attempt',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=False)
    op.alter_column('webhook_retries', 'next_attempt',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=False)
    op.alter_column('webhook_retries', 'error',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('webhook_retries', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.drop_index('idx_webhook_retries_next_attempt', table_name='webhook_retries')
    op.drop_index('idx_webhook_retries_webhook_id', table_name='webhook_retries')
    op.drop_constraint('webhook_retries_webhook_id_fkey', 'webhook_retries', type_='foreignkey')
    op.create_foreign_key(None, 'webhook_retries', 'webhooks', ['webhook_id'], ['id'])
    op.add_column('webhooks', sa.Column('event_types', postgresql.JSON(astext_type=sa.Text()), nullable=False))
    op.alter_column('webhooks', 'url',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('webhooks', 'secret',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('webhooks', 'team_id',
               existing_type=sa.UUID(),
               type_=sa.Integer(),
               existing_nullable=True)
    op.alter_column('webhooks', 'last_retry',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True)
    op.alter_column('webhooks', 'last_error',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('webhooks', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('webhooks', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.drop_index('idx_webhooks_player_id', table_name='webhooks')
    op.drop_index('idx_webhooks_team_id', table_name='webhooks')
    op.drop_constraint('webhooks_player_id_fkey', 'webhooks', type_='foreignkey')
    op.drop_column('webhooks', 'events')
    op.drop_column('webhooks', 'player_id')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('webhooks', sa.Column('player_id', sa.UUID(), autoincrement=False, nullable=True))
    op.add_column('webhooks', sa.Column('events', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False))
    op.create_foreign_key('webhooks_player_id_fkey', 'webhooks', 'players', ['player_id'], ['id'])
    op.create_index('idx_webhooks_team_id', 'webhooks', ['team_id'], unique=False)
    op.create_index('idx_webhooks_player_id', 'webhooks', ['player_id'], unique=False)
    op.alter_column('webhooks', 'updated_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('webhooks', 'created_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('webhooks', 'last_error',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('webhooks', 'last_retry',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True)
    op.alter_column('webhooks', 'team_id',
               existing_type=sa.Integer(),
               type_=sa.UUID(),
               existing_nullable=True)
    op.alter_column('webhooks', 'secret',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.alter_column('webhooks', 'url',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.drop_column('webhooks', 'event_types')
    op.drop_constraint(None, 'webhook_retries', type_='foreignkey')
    op.create_foreign_key('webhook_retries_webhook_id_fkey', 'webhook_retries', 'webhooks', ['webhook_id'], ['id'], ondelete='CASCADE')
    op.create_index('idx_webhook_retries_webhook_id', 'webhook_retries', ['webhook_id'], unique=False)
    op.create_index('idx_webhook_retries_next_attempt', 'webhook_retries', ['next_attempt'], unique=False)
    op.alter_column('webhook_retries', 'created_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('webhook_retries', 'error',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.alter_column('webhook_retries', 'next_attempt',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=False)
    op.alter_column('webhook_retries', 'last_attempt',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=False)
    op.alter_column('webhook_retries', 'event',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=False)
    op.alter_column('webhook_retries', 'webhook_id',
               existing_type=sa.UUID(),
               nullable=True)
    op.drop_constraint(None, 'webhook_health', type_='foreignkey')
    op.create_foreign_key('webhook_health_webhook_id_fkey', 'webhook_health', 'webhooks', ['webhook_id'], ['id'], ondelete='CASCADE')
    op.create_index('idx_webhook_health_status', 'webhook_health', ['status'], unique=False)
    op.alter_column('webhook_health', 'updated_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('webhook_health', 'last_error',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('webhook_health', 'status',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('webhook_health', 'last_check',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True)
    op.drop_constraint(None, 'webhook_analytics', type_='foreignkey')
    op.create_foreign_key('webhook_analytics_webhook_id_fkey', 'webhook_analytics', 'webhooks', ['webhook_id'], ['id'], ondelete='CASCADE')
    op.create_index('idx_webhook_analytics_event_distribution', 'webhook_analytics', ['event_distribution'], unique=False, postgresql_using='gin')
    op.alter_column('webhook_analytics', 'updated_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('webhook_analytics', 'created_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('webhook_analytics', 'retry_distribution',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True)
    op.alter_column('webhook_analytics', 'event_distribution',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True)
    op.add_column('user_roles', sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'user_roles', type_='foreignkey')
    op.drop_constraint(None, 'user_roles', type_='foreignkey')
    op.create_foreign_key('user_roles_user_id_fkey', 'user_roles', 'users', ['user_id'], ['id'])
    op.create_foreign_key('user_roles_role_id_fkey', 'user_roles', 'roles', ['role_id'], ['id'])
    op.create_index('user_roles_user_id_role_id_key', 'user_roles', ['user_id', 'role_id'], unique=True)
    op.alter_column('user_roles', 'context',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.drop_column('user_roles', 'updated_at')
    op.drop_column('user_roles', 'created_at')
    op.drop_column('user_roles', 'profile_id')
    op.add_column('teams', sa.Column('wp_id', sa.INTEGER(), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'teams', type_='foreignkey')
    op.drop_constraint(None, 'teams', type_='foreignkey')
    op.create_foreign_key('teams_created_by_fkey', 'teams', 'users', ['created_by'], ['id'])
    op.create_foreign_key('teams_season_id_fkey', 'teams', 'seasons', ['season_id'], ['id'])
    op.create_index('teams_wp_id_key', 'teams', ['wp_id'], unique=True)
    op.create_index('idx_teams_wp_id', 'teams', ['wp_id'], unique=True)
    op.alter_column('teams', 'logo_url',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('teams', 'season_id',
               existing_type=sa.UUID(),
               nullable=True)
    op.alter_column('teams', 'name',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.drop_column('teams', 'status')
    op.drop_column('teams', 'updated_at')
    op.drop_column('teams', 'description')
    op.drop_constraint(None, 'seasons', type_='foreignkey')
    op.alter_column('seasons', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('seasons', 'name',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.drop_column('seasons', 'league_id')
    op.drop_column('seasons', 'status')
    op.drop_column('seasons', 'updated_at')
    op.drop_column('seasons', 'description')
    op.add_column('rosters', sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'rosters', type_='foreignkey')
    op.drop_constraint(None, 'rosters', type_='foreignkey')
    op.drop_constraint(None, 'rosters', type_='foreignkey')
    op.create_foreign_key('rosters_user_id_fkey', 'rosters', 'users', ['user_id'], ['id'])
    op.create_foreign_key('rosters_season_id_fkey', 'rosters', 'seasons', ['season_id'], ['id'])
    op.create_index('rosters_user_id_team_id_season_id_key', 'rosters', ['user_id', 'team_id', 'season_id'], unique=True)
    op.alter_column('rosters', 'joined_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.drop_column('rosters', 'updated_at')
    op.drop_column('rosters', 'created_at')
    op.drop_column('rosters', 'status')
    op.drop_column('rosters', 'profile_id')
    op.alter_column('roles', 'name',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.drop_column('roles', 'updated_at')
    op.drop_column('roles', 'created_at')
    op.add_column('players', sa.Column('stats', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('players', sa.Column('wp_id', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('players', sa.Column('team_wp_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('players', sa.Column('team_id', sa.UUID(), autoincrement=False, nullable=True))
    op.add_column('players', sa.Column('season_id', sa.UUID(), autoincrement=False, nullable=True))
    op.create_foreign_key('players_team_id_fkey', 'players', 'teams', ['team_id'], ['id'])
    op.create_foreign_key('players_season_id_fkey', 'players', 'seasons', ['season_id'], ['id'])
    op.create_index('players_wp_id_key', 'players', ['wp_id'], unique=True)
    op.create_index('idx_players_wp_id', 'players', ['wp_id'], unique=True)
    op.alter_column('players', 'name',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               nullable=False)
    op.alter_column('players', 'id',
               existing_type=sa.Integer(),
               type_=sa.UUID(),
               existing_nullable=False,
               autoincrement=True,
               existing_server_default=sa.text('gen_random_uuid()'))
    op.drop_column('players', 'updated_at')
    op.drop_column('players', 'jersey_number')
    op.drop_column('players', 'position')
    op.create_table('users',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('username', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('email', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('discord_id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='users_pkey')
    )
    op.create_index('users_discord_id_key', 'users', ['discord_id'], unique=True)
    op.create_table('wp_posts',
    sa.Column('id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('title', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('content', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('type', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('status', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('modified', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='wp_posts_pkey')
    )
    op.create_table('analytics_logs',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('action', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('timestamp', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='analytics_logs_pkey')
    )
    op.create_index('ix_analytics_logs_id', 'analytics_logs', ['id'], unique=False)
    op.drop_table('webhook_events')
    op.drop_table('player_stats')
    op.drop_table('match_submissions')
    op.drop_table('team_members')
    op.drop_table('team_invitations')
    op.drop_table('matches')
    op.drop_table('divisions')
    op.drop_table('league_settings')
    op.drop_table('conferences')
    op.drop_table('profiles')
    op.drop_table('notifications')
    op.drop_table('leagues')
    op.drop_table('form_submissions')
    # ### end Alembic commands ###
