"""add auth_service_id to user model

Revision ID: ad40e33a5d19
Revises: 
Create Date: 2025-05-18 22:50:39.491632

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'ad40e33a5d19'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('players',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('position', sa.String(), nullable=True),
    sa.Column('jersey_number', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.add_column('divisions', sa.Column('description', sa.Text(), nullable=True))
    op.add_column('divisions', sa.Column('season_id', sa.UUID(), nullable=False))
    op.drop_constraint('divisions_conference_id_fkey', 'divisions', type_='foreignkey')
    op.create_foreign_key(None, 'divisions', 'seasons', ['season_id'], ['id'], ondelete='CASCADE')
    op.drop_column('divisions', 'conference_id')
    op.alter_column('matches', 'scheduled_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False)
    op.add_column('rosters', sa.Column('is_captain', sa.Boolean(), nullable=False))
    op.drop_column('user_roles', 'profile_id')
    op.add_column('users', sa.Column('auth_service_id', sa.String(), nullable=False))
    op.create_unique_constraint(None, 'users', ['auth_service_id'])
    op.alter_column('webhook_analytics', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True)
    op.alter_column('webhook_analytics', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True)
    op.alter_column('webhook_events', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True)
    op.alter_column('webhook_events', 'last_attempt',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True)
    op.alter_column('webhook_health', 'last_check',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True)
    op.alter_column('webhook_health', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True)
    op.alter_column('webhook_retries', 'last_attempt',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=False)
    op.alter_column('webhook_retries', 'next_attempt',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=False)
    op.alter_column('webhook_retries', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True)
    op.alter_column('webhooks', 'team_id',
               existing_type=sa.UUID(),
               type_=sa.UUID(),
               existing_nullable=True)
    op.alter_column('webhooks', 'last_retry',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True)
    op.alter_column('webhooks', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True)
    op.alter_column('webhooks', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('webhooks', 'updated_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True)
    op.alter_column('webhooks', 'created_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True)
    op.alter_column('webhooks', 'last_retry',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True)
    op.alter_column('webhooks', 'team_id',
               existing_type=sa.UUID(),
               type_=sa.UUID(),
               postgresql_using="team_id::uuid",
               existing_nullable=True)
    op.alter_column('webhook_retries', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True)
    op.alter_column('webhook_retries', 'next_attempt',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               postgresql_using="next_attempt::timestamp",
               existing_nullable=False)
    op.alter_column('webhook_retries', 'last_attempt',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               postgresql_using="last_attempt::timestamp",
               existing_nullable=False)
    op.alter_column('webhook_health', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               postgresql_using="updated_at::timestamp",
               existing_nullable=True)
    op.alter_column('webhook_health', 'last_check',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               postgresql_using="last_check::timestamp",
               existing_nullable=True)
    op.alter_column('webhook_events', 'last_attempt',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               postgresql_using="last_attempt::timestamp",
               existing_nullable=True)
    op.alter_column('webhook_events', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               postgresql_using="created_at::timestamp",
               existing_nullable=True)
    op.alter_column('webhook_analytics', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               postgresql_using="updated_at::timestamp",
               existing_nullable=True)
    op.alter_column('webhook_analytics', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               postgresql_using="created_at::timestamp",    
               existing_nullable=True)
    op.drop_constraint(None, 'users', type_='unique')
    op.drop_column('users', 'auth_service_id')
    op.add_column('user_roles', sa.Column('profile_id', sa.UUID(), autoincrement=False, nullable=False))
    op.drop_column('rosters', 'is_captain')
    op.alter_column('matches', 'scheduled_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True)
    op.add_column('divisions', sa.Column('conference_id', sa.INTEGER(), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'divisions', type_='foreignkey')
    op.create_foreign_key('divisions_conference_id_fkey', 'divisions', 'conferences', ['conference_id'], ['id'], ondelete='CASCADE')
    op.drop_column('divisions', 'season_id')
    op.drop_column('divisions', 'description')
    op.drop_table('players')
    # ### end Alembic commands ###
